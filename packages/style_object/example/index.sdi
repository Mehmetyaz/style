{

    /// native types. value length fixed (native_types is style_data)
    ROOT.FIXED_KEY(L_TYPE(LENGTH)) : NATIVE_TYPES(L_TYPE(LENGTH), VALUE)

    /// dynamic length style data. (dynamic_length is style_data)
    ROOT.DYNAMIC_KEY(F_TYPE) : DYNAMIC_LENGTH_TYPED(F_TYPE, G_LENGTH, VALUE)


    /// dynamic length style data. (dynamic_length is style_data)
    ROOT.DYNAMIC_TYPE_KEY : DYNAMIC_TYPE_LENGTH(G_TYPE, G_LENGTH, VALUE)


    /// object
    ROOT.OBJECT_KEY(F_TYPE) : DYNAMIC_LENGTH_TYPED(F_TYPE, G_LENGTH,STYLE_OBJECT(G_LENGTH, VALUE))

    /// map (style_object is dynamic_length)
    ROOT.DYNAMIC_KEY(F_TYPE) : STYLE_OBJECT({
              ROOT.KEY.KEY: STYLE_DATA
              ROOT.KEY.KEY: STYLE_DATA
           }))

    /// fixed count&type&length list
    ROOT.FIXED_LIST_KEY(COUNT, L_TYPE(LENGTH)) : FIXED_COUNT_LENGTH_TYPE_LIST(COUNT, L_TYPE(LENGTH) ,[VALUE, VALUE])

    /// fixed type&length list
    ROOT.FIXED_LENGTH_TYPE_LIST_KEY(L_TYPE(LENGTH)) : FIXED_LENGTH_TYPE_LIST(G_COUNT, L_TYPE(LENGTH), [VALUE, VALUE])

    /// fixed type - dynamic length list
    ROOT.DYNAMIC_TYPED_LIST_KEY(F_TYPE) : TYPED_DYNAMIC_LIST(G_COUNT, [DYNAMIC_LENGTH(TYPE , G_LENGTH, VALUE)])

    /// dynamic type & count & length list
    ROOT.DYNAMIC_LIST_KEY: DYNAMIC_LIST(G_COUNT, [DYNAMIC_LENGTH_TYPED(G_LENGTH, G_TYPE, VALUE)])

    /// list map
    ROOT.DYNAMIC_TYPED_LIST_KEY(TYPE) : TYPED_DYNAMIC_LIST(G_COUNT, G_LENGTH ,[STYLE_OBJECT(G_LENGTH,VALUE)])

    /// list map
    KEY : [
        {
            KEY.INDEX.KEY : STYLE_DATA
        },
        {
            KEY.INDEX.KEY : STYLE_DATA
        },
    ]

    /// matrix
    ROOT.FIXED_LIST_KEY(COUNT, FIXED_LIST_KEY(COUNT, L_TYPE(LENGTH)))

}

READ PROCESS

INPUT : BYTES
RESULT: STYLE_OBJECT({
    KEY : DART_VALUE,
    KEY : DART_VALUE
})

-- STYLE_OBJECT.READ(CONVERTER)
    -- OFFSET = 0
    -- KEY = READ-KEY[OFFSET + 4]
    -- TYPE = CONVERTER.GET-TYPE(KEY) ?? READ-TYPE[2]
    -- VALUE = TYPE.CREATE[OFFSET + 0-]
                -- NATIVE-TYPES
                    -- LENGTH
                    -- READ-VALUE[OFFSET + LENGTH]
                -- DYNAMIC-LENGTH-TYPED
                    -- LENGTH = READ-LENGTH[OFFSET + 4]
                    -- READ-VALUE[OFFSET + LENGTH]

WRITE PROCESS

INPUT : STYLE_OBJECT({
    KEY : DART_VALUE,
    KEY : DART_VALUE
})

RESULT : BYTES

-- STYLE_OBJECT.WRITE(CONVERTER)
    -- FOR-EACH-ENTRY
        -- BYTE = ENTRY.WRITE
            -- KEY = ENTRY.KEY
            -- VALUE = ENTRY.VALUE
            -- KEY.WRITE[4]
            -- KEY.WRITE-META[0-8]
            -- VALUE.WRITE[VALUE_LENGTH]
            -- LENGTH += VALUE_LENGTH + [0-8] + 4
        -- BYTES.ADD



FIXED LENGTH PAIR
0xFFFF          pair key (pair type and length stored with key)
[0xF]           value bytes

///DYNAMIC LENGTH PAIR
///0xFFFF          pair key (pair type stored with key)
///0xFFFF          pair value length
///[0xF]           value bytes

DYNAMIC LENGTH LIST

--- ITEM LENGTH/TYPE FIXED
0xFFFF          pair key (pair type stored with key)
0xFF            items type (items length stored with type)
0xFFFF          item count
[[0xF],[0xF]]   values

--- ITEM LENGTH/TYPE DYNAMIC

    ---SAME-ITEM-TYPE
0xFFFF          pair key (pair type stored with key)
0xFF            items type
0xFFFF          item count
[0xFFFF [0xF]]  (item length, item value) value

    ---DYNAMIC-ITEM-TYPE
0xFFFF          pair key (pair type stored with key)
0xFFFF          item count
[0xFF 0xFFFF [0xF]]  (item type, item length, item value) value

FIXED LENGTH LIST
0xFFFF          pair key (pair type , item type, item count stored with key)
[[0xF],[0xF]]   value

MATRIX
0xFFFF          pair key (pair type stored with key)
0xFF            items type (items length stored with type)
0xFF            items len (if required)
0xFFFF          column-len
0xFFFF          row-len
[[0xF],[0xF]]   value


MAP
0xFFFF          pair key (pair type stored with key) (key generator from up)
0xFFFF          key count
[[0xF],[0xF]]   same object


LIST MAP
0xFFFF          total length
0xFFFF          pair key (pair type stored with key) (key generator from up)
[[0xF],[0xF]]
                0xFFFF          pair key (pair type stored with key) (key generator from up)
                0xFFFF          key count
                [[0xF],[0xF]]   same object